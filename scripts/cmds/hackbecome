const fs = require("fs");
const path = "./hackers.json";

// Fonction pour lire le fichier des hackeurs
function getHackers() {
  if (!fs.existsSync(path)) return {};
  return JSON.parse(fs.readFileSync(path));
}

// Fonction pour sauvegarder les hackeurs
function saveHackers(data) {
  fs.writeFileSync(path, JSON.stringify(data, null, 2));
}

module.exports = {
  config: {
    name: "hackbecome",
    version: "1.0",
    author: "L'Uchiha Perdu",
    role: 0,
    shortDescription: "Devenir hackeur",
    longDescription: "Répondez correctement aux 3 questions pour devenir hackeur.",
    category: "hacking"
  },

  onStart: async function ({ message, event, args }) {
    const senderID = event.senderID;
    let hackers = getHackers();

    if (hackers[senderID]) return message.reply("😎 Vous êtes déjà hackeur !");

    // Liste des questions et réponses
    const questions = [
      { question: "Combien font 987 x 123 ?", answer: "121401" },
      { question: "Quel est le système d'exploitation basé sur Linux ?", answer: "Ubuntu" },
      { question: "Qui est le créateur de l'univers ?", answer: "L'Uchiha Perdu" }
    ];

    // Si aucune réponse n'est fournie
    if (!args[0]) {
      return message.reply(`🕵️ Répondez aux 3 questions pour devenir hackeur.\n\n${questions[0].question}\n\nRépondez avec : /hackbecome [réponse]`);
    }

    // Vérifier la réponse
    let progress = hackers[senderID] ? hackers[senderID].progress : 0;
    if (args.join(" ").toLowerCase() === questions[progress].answer.toLowerCase()) {
      progress++;
      hackers[senderID] = { progress };
      saveHackers(hackers);

      if (progress === questions.length) {
        message.reply("🎉 Parfait ! Vous êtes maintenant un hackeur officiel !");
        hackers[senderID] = { progress: "hackeur" };
        saveHackers(hackers);
      } else {
        message.reply(`✅ Correct ! Prochaine question :\n\n${questions[progress].question}\n\nRépondez avec : /hackbecome [réponse]`);
      }
    } else {
      message.reply("❌ Mauvaise réponse ! Essayez encore.");
    }
  }
};