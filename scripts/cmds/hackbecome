module.exports = {
  config: {
    name: "hackbecome",
    version: "1.0",
    author: "L'Uchiha Perdu",
    countDown: 5,
    role: 2, // Accès admin pour les utilisateurs
    shortDescription: { en: "Devenir un hackeur" },
    description: { en: "Permet à un utilisateur de devenir hackeur en résolvant des énigmes" },
    category: "💻 Fun",
    guide: { en: "/hackbecome" }
  },

  onStart: async function ({ api, args, event }) {
    const userID = event.senderID;

    // Vérifie si l'utilisateur est déjà hackeur
    if (userIDIsHacker(userID)) {
      return api.sendMessage("🚫 Vous êtes déjà un hackeur. Continuez votre chemin ! 🔐", event.threadID);
    }

    // Défis de factorisation et quiz
    const challenges = [
      { question: "Quel est le facteur premier de 144 ?", answer: "12" },
      { question: "Quel est le résultat de 37 x 11 ?", answer: "407" },
      { question: "Quel est le mot de passe secret pour pirater ?", answer: "1234" }
    ];

    // On envoie les défis à l'utilisateur
    const challengeIndex = Math.floor(Math.random() * challenges.length);
    const challenge = challenges[challengeIndex];

    api.sendMessage(`🧠 Pour devenir hackeur, répondez à cette question :\n\n1) ${challenge.question}`, event.threadID);

    // Attente de la réponse de l'utilisateur
    api.listen((reply) => {
      // Vérifier si la réponse est correctement formatée
      const answerRegex = /^1\)\s*(.+)$/;
      const match = reply.message.match(answerRegex);

      if (match) {
        const userAnswer = match[1].trim();

        if (userAnswer === challenge.answer) {
          api.sendMessage(`🎉 Félicitations, vous êtes désormais un hackeur ! 🔓`, event.threadID);
          addHacker(userID); // Fonction pour ajouter l'utilisateur comme hackeur
        } else {
          api.sendMessage("❌ Mauvaise réponse. Réessayez encore. 💻", event.threadID);
        }
      } else {
        api.sendMessage("❌ Format de réponse invalide. Répondez sous ce format :\n1) <votre réponse>", event.threadID);
      }
    });
  }
};

// Fonction pour ajouter l'utilisateur comme hackeur
function addHacker(userID) {
  const hackers = JSON.parse(fs.readFileSync("./hackers.json"));
  hackers.push(userID);
  fs.writeFileSync("./hackers.json", JSON.stringify(hackers, null, 2));
}

// Vérifie si l'utilisateur est déjà hackeur
function userIDIsHacker(userID) {
  const hackers = JSON.parse(fs.readFileSync("./hackers.json"));
  return hackers.includes(userID);
}